1.parenthesis
    Always write opening and closing parenthesis,angle brackets all at the same time and move 
        the cursor in the brackets

2.Catch mixed usage of double and single quotes.
    /*
            Catch Mixed Usage of Single and Double Quotes

    JavaScript allows the use of both single (') and double (") quotes to declare a string. Deciding which one to use generally comes down to personal preference, with some exceptions.

    Having two choices is great when a string has contractions or another piece of text that's in quotes. Just be careful that you don't close the string too early, which causes a syntax error.

    Here are some examples of mixing quotes:

    const grouchoContraction = "I've had a perfectly wonderful evening, but this wasn't it.";
    const quoteInString = "Groucho Marx once said 'Quote me as saying I was mis-quoted.'";
    const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';

    The first two are correct, but the third is incorrect.

    Of course, it is okay to use only one style of quotes. You can escape the quotes inside the string by using the backslash (\) escape character:

    const allSameQuotes = 'I\'ve had a perfectly wonderful evening, but this wasn\'t it.';


    */

3   Catch Use of Assignment Operator Instead of Equality Operator
    /*

    Branching programs, i.e. ones that do different things if certain conditions are met, rely on if, else if, and else statements in JavaScript. The condition sometimes takes the form of testing whether a result is equal to a value.

    This logic is spoken (in English, at least) as "if x equals y, then ..." which can literally translate into code using the =, or assignment operator. This leads to unexpected control flow in your program.

    As covered in previous challenges, the assignment operator (=) in JavaScript assigns a value to a variable name. And the == and === operators check for equality (the triple === tests for strict equality, meaning both value and type are the same).

    The code below assigns x to be 2, which evaluates as true. Almost every value on its own in JavaScript evaluates to true, except what are known as the "falsy" values: false, 0, "" (an empty string), NaN, undefined, and null.

    let x = 1;
    let y = 2;
    if (x = y) {

    } else {

    }

    In this example, the code block within the if statement will run for any value of y, unless y is falsy. The else block, which we expect to run here, will not actually run.

    Fix the condition so the program runs the right branch, and the appropriate value is assigned to result.
    */

4   Catch Missing Open and Closing Parenthesis After a Function Call

    /*

    When a function or method doesn't take any arguments, you may forget to include the (empty) opening and closing parentheses when calling it. Often times the result of a function call is saved in a variable for other use in your code. This error can be detected by logging variable values (or their types) to the console and seeing that one is set to a function reference, instead of the expected value the function returns.

    The variables in the following example are different:

    function myFunction() {
    return "You rock!";
    }
    let varOne = myFunction;
    let varTwo = myFunction();

    Here varOne is the function myFunction, and varTwo is the string You rock!.

    */

5   Catch Arguments Passed in the Wrong Order When Calling a Function

    /*
    Continuing the discussion on calling functions, the next bug to watch out for is when a function's arguments are supplied in the incorrect order. If the arguments are different types, such as a function expecting an array and an integer, this will likely throw a runtime error. If the arguments are the same type (all integers, for example), then the logic of the code won't make sense. Make sure to supply all required arguments, in the proper order to avoid these issues.
    */

6   Catch Off By One Errors When Using Indexing

    Off by one errors (sometimes called OBOE) crop up when you're trying to target a specific index of a string or array (to slice or access a segment), or when looping over the indices of them. JavaScript indexing starts at zero, not one, which means the last index is always one less than the length of the item. If you try to access an index equal to the length, the program may throw an "index out of range" reference error or print undefined.

    When you use string or array methods that take index ranges as arguments, it helps to read the documentation and understand if they are inclusive (the item at the given index is part of what's returned) or not. Here are some examples of off by one errors:

    let alphabet = "abcdefghijklmnopqrstuvwxyz";
    let len = alphabet.length;
    for (let i = 0; i <= len; i++) {
    console.log(alphabet[i]);
    }
    for (let j = 1; j < len; j++) {
    console.log(alphabet[j]);
    }
    for (let k = 0; k < len; k++) {
    console.log(alphabet[k]);
    }

    The first example here loops one too many times, and the second loops one too few times (missing the first index, 0). The third example is correct.

7   Use Caution When Reinitializing Variables Inside a Loop

    Sometimes it's necessary to save information, increment counters, or re-set variables within a loop. A potential issue is when variables either should be reinitialized, and aren't, or vice versa. This is particularly dangerous if you accidentally reset the variable being used for the terminal condition, causing an infinite loop.

    Printing variable values with each cycle of your loop by using console.log() can uncover buggy behavior related to resetting, or failing to reset a variable.


8   Prevent Infinite Loops with a Valid Terminal Condition

    The final topic is the dreaded infinite loop. Loops are great tools when you need your program to run a code block a certain number of times or until a condition is met, but they need a terminal condition that ends the looping. Infinite loops are likely to freeze or crash the browser, and cause general program execution mayhem, which no one wants.

    There was an example of an infinite loop in the introduction to this section - it had no terminal condition to break out of the while loop inside loopy(). Do NOT call this function!

    function loopy() {
    while(true) {
        console.log("Hello, world!");
    }
    }

    It's the programmer's job to ensure that the terminal condition, which tells the program when to break out of the loop code, is eventually reached. One error is incrementing or decrementing a counter variable in the wrong direction from the terminal condition. Another one is accidentally resetting a counter or index variable within the loop code, instead of incrementing or decrementing it.

